============================ < git 업로드 셋팅 >=========================================================

1. 계정설정
git config --global user.name "KoreaCodingKing"
git config --global user.email "dudfhr132@gmail.com"

2. 깃 컴퓨터 저장공간 초기화
git init								// 현재 폴더를 로컬저장소로 설정

3. 깃 연결								
git remote add origin https://github.com/injinsong/simple.git

4. 깃 상태 확인 							// 빨간색이면 변경된 파일???? 깃 2차공간으로 넘겨야 함
git status

5. 깃 상태 업로드 설정
git add .					cd			// 수정된 내용 2차공간으로 업로드 준비
git commit -m "메세지메세지"						// 수정된 내용 2차공간으로 업로드 
git push origin master							// 수정된 내용 깃 계정으로 최종업로드
git status								// 상태확인


============================ < git 브렌치 셋팅 명령어 >=======================================================

git branch								// 브랜치 보기
git branch "[branch이름]"						// 새로운 branch를 생성
git checkout [branch이름]						// branch를 지정해 이동
git checkout -b [branch이름] 						// branch를 생성하고 해당 branch로 이동한다.
git branch -m [기존 branch이름] [바꿀 새이름]				// 기존 branch의 이름을 변경한다.


============================<git 브렌치 활용 명령어>===========================================================
git diff 								// 현재 브랜치의 마지막 커밋과 차이점비교
git diff[Commit ID]							// 특정 커밋과의 차이점 비교
git diff[Commit ID]							// 특정 커밋과 특정 파일의 차이점 비교


============================<git 프로젝트 설정 명령어>=========================================================

cd 									// 명령어를 통해 프로젝트를 저장할 로컬경로로 이동
git clone							 	// 깃허브 프로젝트주소 / 명령어를 통해 프로젝트를 복사
git init 								// 명령어를 통해 저장소를 초기화 한다.
is -al 									// 명령어를 통해 폴더 안의 폴더와 파일들을 확인할 수 있다.
git status	
+							// 현재 git 정보 확인
git log 								// git log 확인
git add 파일명 								// 명령어를 통해 commit할 파일들을 등록합니다.
git commit 								// 명령어를 통해 commit을 진행할 수 있다.
git commit -m "메시지내용 " 						// 커밋 상세내용을 넣는다.
git push origin branch이름  						// 명령어로 commit된 내용을 gif으로 push 한다.
git config --global user.email "메일주소"
git config --global user.name "이름"

git
=========================== < git 설정제거 명령어 >=====================================================================
git remote remove origin  						// remote로 연결된 깃의 연결상태를 제거
git branch -d [branch이름]						// branch를 삭제한다.
rm -r .git								// 로컬저장소로 설정된 것을 취소

=========================== < git 초기화 >=====================================================================
rm -rf .git							//기존의 모든 히스토리 삭제

// 현재 소스들로 git repository 다시 생성하기

git init

git status

git add README.md

git commit -m "first commit"

git remote add origin https://(저장소 주소)

git push -u origin master






git config --global user.name "이름"
git config --global user.email "깃허브 메일주소" // 매번 물어보는 귀찮음을 피하기 위해 설정.

mkdir ~/MyProject   // 로컬 디렉토리 만들고
cd ~/myproject      // 디렉토리로 들어가서
git init            // 깃 명령어를 사용할 수 있는 디렉토리로 만든다.
git status          // 현재 상태를 훑어보고
git add 화일명.확장자  // 깃 주목 리스트에 화일을 추가하고 or
git add .           // 이 명령은 현재 디렉토리의 모든 화일을 추가할 수 있다.
git commit -m “현재형으로 설명” // 커밋해서 스냅샷을 찍는다.

git remote add origin https://github.com/username/myproject.git // 로컬과 원격 저장소를 연결한다.
git remote -v // 연결상태를 확인한다.
git push origin master // 깃허브로 푸시한다.